package pt.ist.sonet.domain;

import java.io.Serializable;

import pt.ist.sonet.exception.*;

/**
 * 
 * Classe Agent que herda de Agent_Base
 * 
 */
public abstract class Agent extends Agent_Base implements Serializable{
	protected static String ORGANIZATIONAL = "Organizational";
	protected static String INDIVIDUAL = "Individual";
	protected static String FRIEND = "amigo";
	protected static String PUBLIC = "publica";
	protected static String PRIVATE = "privado";
	private static final long serialVersionUID = 1L;

	
	/**
	 * Construtor
	 */
	protected  Agent() {}

	/**
	 * Metodo auxiliar ao construtor
	 * 
	 * @param String user - username do agente
	 * @param String name - nome do agente
	 * @param String email - email do agente
	 * @param String pass - palavra passe do agente
	 * @param String city - cidade do agente
	 * @param String nation - pais do agente
	 */
	protected void init(String user, String name, String email, String pass, String city, String nation, String permission) {
		setUsername(user);
		setName(name);
		setEmail(email);
		setPassword(pass);
		setCity(city);
		setCountry(nation);
		if(permission.equals(PUBLIC)) {
			setPermission(new Public());
			return;
		}
		if(permission.equals(FRIEND)) {
			setPermission(new Friend());
			return;
		}
		//default
		setPermission(new Public());
	}   

	/**
	 * Metodo que muda a permissao por omissao do agente. Este metodo tem em conta
	 * apenas as permissoes por omissao amigo e publica 
	 */
	public void changePermission(String toChange) {
		if(toChange.equals(PUBLIC)) {
			setPermission(new Public());
			return;
		}
		if(toChange.equals(FRIEND)) {
			setPermission(new Friend());
			return;
		}
		if(toChange.equals(PRIVATE)) {
			setPermission(new Private());
			return;
		}
		setPermission(new Public());
	}	

	/**
	 * Metodo abstracto
	 * 
	 * @param Agent wannabe - agente que envia o pedido de amizade
	 */
	public abstract void processFriendReq(Individual wannabe);


	/**
	 * Metodo que adiciona um amigo ao agente. Para isso, vai procurar se o agente
	 * a adicionar aos amigos ja existe. Se existir, lanca uma excepcao.
	 * Se nao existir, adiciona aos amigos.
	 * 
	 * @param Agent friend - agente a adicionar aos amigos
	 * @throws FriendAlreadyExistsException - caso friend ja seja um amigo
	 */
	@Override
	public void addFriends(Agent friend) throws FriendAlreadyExistsException {
		if(this.isMyFriend(friend)) {
			throw new FriendAlreadyExistsException(friend.getName());
		}		
		super.addFriends(friend);
	}

	/**
	 * Método para verificar se o número de amigos já foi excedido
	 * @param friendLimit
	 * @return true se o o número de amigos não exceder o número de definido na sonet;
	 * @throws FriendLimitExceededException
	 */
	public abstract boolean checkFriendLimit(int friendLimit, int friendCount);
	
	/**
	 * Metodo que verifica se um dado agente e amigo
	 * 
	 * @param Agent someone - agente do qual que se quer saber se e amigo
	 * @return boolean true - se for amigo
	 * @return boolean false - se nao for amigo
	 */	
	public boolean isMyFriend(Agent someone) {
		return (someone.hasFriends(this) || this.hasFriends(someone));
	}

	/**
	 * Metodo chamado quando o agente quer comentar uma dada publicacao. Verifica primeiro qual a permissao
	 * por omissao do agente associado a publicacao que se quer comentar e, caso seja possivel, comenta criando
	 * o comentario e chamando o metodo commentPublication da publicacao
	 * 
	 * @param Publication pub - publicacao que se quer comentar
	 * @param String comment - texto do comentario
	 */
	public void commentPublication(Publication pub, String comment) throws YouArentAFriendException {
		if(pub.getAgent().getPermission().canAcess(this, pub.getAgent())) {
			Comment comentario = new Comment(this, pub, pub.generateCommentId(), comment);
			pub.commentPublication(comentario);
		}
		else { //por enquanto, o unico motivo que o leva a nao ter permissao e nao ser amigo
			throw new YouArentAFriendException(pub.getAgent().getName());
		}
	}

	/**
	 * Metodo que adiciona uma publicacao a base de dados do agentePara isso chama o metodo addPublications
	 * da superclasse
	 * 
	 * @param Note note - publicacao a adicionar
	 */
	public void addNote(Note note){
		super.addPublications(note);
	}

	/**
	 * Metodo que adiciona uma publicacao a base de dados do agente. Para isso chama o metodo addPublications
	 * da superclasse
	 * 
	 * @param Content content - publicacao a adicionar
	 */
	public void addContent(Content content){
		super.addPublications(content);
	}  

	/**
	 * Metodo que adiciona um voto positivo a uma publicacao. Verifica primeiro se pode votar e,
	 * se sim, adiciona o voto chamando para isso o metodo positiveVote da publicacao
	 * 
	 * @param Publication pub - publicacao na qual se quer votar
	 * @throws YouArentAFriendException
	 */
	public void positiveVote(Publication pub) throws YouArentAFriendException {

		if(this.canVote(pub)) {
			pub.positiveVote(this);
		}
		else throw new YouArentAFriendException(pub.getAgent().getName());

	}

	/**
	 * Metodo que adiciona um voto negativo a uma publicacao. Verifica primeiro se pode votar e,
	 * se sim, adiciona o voto chamando para isso o metodo negativeVote da publicacao
	 * 
	 * @param Publication pub - publicacao na qual se quer votar
	 * @throws YouArentAFriendException
	 */
	public void negativeVote(Publication pub) throws YouArentAFriendException {

		if(this.canVote(pub)) {
			pub.negativeVote(this);
		}
		else throw new YouArentAFriendException(pub.getAgent().getName());
	}
	
	/**
	 * Metodo que verifica se um agente pode votar numa publicacao
	 * 
	 * @param Publication pub - publicacao na qual se quer votar
	 * @throws AgentsCantVoteInTheirOwnPublicationsException
	 */
	public boolean canVote(Publication pub) throws AgentsCantVoteInTheirOwnPublicationsException {
		if (this.equals(pub.getAgent())){
			throw new AgentsCantVoteInTheirOwnPublicationsException(pub.getAgent().getName(), pub.getId());
		}
		
		return pub.getAgent().getPermission().canAcess(this, pub.getAgent());
	}

	/**
	 * Metodo abstracto
	 */
	public abstract String getType();

	/**
	 * Metodo que retorna informacoes do agente (nome, cidade, etc)
	 * 
	 * @return String
	 */
	public String toString() {
		return this.getType() + " Agent | " + this.getUsername() + " | " + this.getName() + " | " + this.getEmail() + " | " + this.getCity() + ", " + this.getCountry();
	}

	/**
	 * Metodo que retorna uma string cujo conteudo sao as publicacoes
	 * (e comentarios, caso os haja) do agente
	 * 
	 * @return String s
	 */
	public String myPublicationsToString(){
		String s="";
		boolean first=true;
		for(Publication p : getPublicationsSet()){
			if(first){
				s="\t"+s+p.toStringHeader()+"\n\t"+p.toStringWithComments();
				first=false;
			}
			else s=s+"\t"+p.toStringWithComments();
		}    	
		return s;
	}

}