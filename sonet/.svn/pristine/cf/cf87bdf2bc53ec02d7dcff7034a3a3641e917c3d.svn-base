package pt.ist.sonet.service;

import pt.ist.fenixframework.FenixFramework;
import pt.ist.pagamigo.InvalidTransferException;
import pt.ist.pagamigo.PagAmigoLocal;
import pt.ist.sonet.domain.SoNet;
import pt.ist.sonet.exception.AgentUsernameDoesNotExistsException;
import pt.ist.sonet.exception.PagAmigoTransferException;
import pt.ist.sonet.exception.SoNetException;

/**
 * Implementa o servico de processamento de pagamentos entre dois agentes da SoNet.
 * 
 * @author ES Grupo 8
 *
 */
public class ProcessPaymentService extends SonetService {
	
	private String fromUser;
	private String toUser;
	private Integer _amount;
	private String paymentDesc;
	
	/**
	 * Construtor
	 * 
	 * @param String from
	 * @param String to
	 * @param Integer amount
	 * @param String description
	 */
	public ProcessPaymentService(String from, String to, Integer amount, String description) {
		fromUser = from;
		toUser = to;
		_amount = amount;
		paymentDesc = description;		
	}

	/**
	 * Faz o dispatch do servico
	 * 
	 * @throws SoNetException
	 * @throws AgentUsernameDoesNotExistsException 
	 * @throws PagAmigoTransferException
	 */
	@Override
	public void dispatch() throws SoNetException, AgentUsernameDoesNotExistsException, PagAmigoTransferException {
		
		SoNet network = FenixFramework.getRoot();
		if(!network.hasAgentByUsername(fromUser))
			throw new AgentUsernameDoesNotExistsException(fromUser);
		if(!network.hasAgentByUsername(toUser))
			throw new AgentUsernameDoesNotExistsException(toUser);
		PagAmigoLocal paga = new PagAmigoLocal();
		try {
			paga.transfer(fromUser, toUser, _amount, paymentDesc);
		} catch (InvalidTransferException e) {
			throw new PagAmigoTransferException(fromUser, toUser, _amount, paymentDesc);
		}
		
	}

}
