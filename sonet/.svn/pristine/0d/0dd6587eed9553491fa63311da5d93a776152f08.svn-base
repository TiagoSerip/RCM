package pt.ist.sonet.domain;


class SoNet{
int publicationIds;
int friendLimit;
int voteLimit;
}

class Agent{
	String username;
	String name;
	String email;
	String password;
	String city;
	String country;	
}

class Individual extends Agent;
class Organizational extends Agent;

class Permission;
class Private extends Permission;
class Public extends Permission;
class Friend extends Permission;
class FriendOfFriend extends Permission;

class Publication{
	int id;
	int commentIds;
	String label;
	int posVotes;
	int negVotes;
	int pubVoteLimit;
}

class Note extends Publication{
	String text;
}
class Content extends Publication{
	String URL;
	int price;
}

class Comment{
	int id;
	String text;
}

relation SonetHasAgents{
	SoNet playsRole sonet{
	multiplicity 1..1;
	}
	Agent playsRole agent{
		multiplicity 0..*;
	}
}

relation SonetHasPublications{
	SoNet playsRole sonet{
	multiplicity 1;
	}
	Publication playsRole publications{
		multiplicity 0..*;
	}
}

relation AgentHasPublications{
	Agent playsRole agent{
	multiplicity 1..1;
	}
	Publication playsRole publications{
		multiplicity 0..*;
	}
}


relation AgentHasPermission{
	Agent playsRole agent{
	multiplicity 1..1;
	}
	Permission playsRole permission{
		multiplicity 1..1;
	}
}

relation AgentHasComments{
	Agent playsRole agent{
	multiplicity 1..1;
	}
	Comment playsRole comments{
		multiplicity 0..*;
	}
}

relation PublicationHasComments{
	Publication playsRole publication{
	multiplicity 1..1;
	}
	Comment playsRole comments{
		multiplicity 0..*;
	}
}

relation AgentHasPendingRequests{
	Individual playsRole agentPR{
		multiplicity *;
	}
	Individual playsRole pendingRequest{
		multiplicity 0..*;
	}
}

relation AgentHasFriends{
	Agent playsRole agent{
	multiplicity *;
	}
	Agent playsRole friends{
		multiplicity 0..*;
	}
}

relation PublicationHasBlockedAgents{
	Publication playsRole publicationBlkdAgents{
		multiplicity *;
	}
	Agent playsRole blockedAgent{
		multiplicity 0..*;
	}
}

relation PublicationHasAlreadyVotedAgents{
	Publication playsRole publicationVtdAgents{
		multiplicity *;
	}
	Agent playsRole alreadyVoted{
		multiplicity 0..*;
	}
}
