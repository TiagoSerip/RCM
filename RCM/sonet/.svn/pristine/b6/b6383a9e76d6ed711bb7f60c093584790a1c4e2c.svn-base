package pt.ist.sonet.presentation.server;

import pt.ist.fenixframework.Config;

import pt.ist.fenixframework.FenixFramework;
import pt.ist.sonet.domain.SoNet;
import pt.ist.sonet.presentation.client.SoNetServlet;
import pt.ist.sonet.presentation.shared.FieldVerifier;
import pt.ist.sonet.service.AddNoteService;
import pt.ist.sonet.service.AgentLoginService;
import pt.ist.sonet.service.FriendsOfAgentService;
import pt.ist.sonet.service.GetAllPublicationsService;
import pt.ist.sonet.service.ListAllService;
import pt.ist.sonet.service.RegisterAgentService;
import pt.ist.sonet.service.dto.ListingDto;
import pt.ist.sonet.service.dto.AgentListDto;
import pt.ist.sonet.service.dto.BooleanDto;
import pt.ist.sonet.service.dto.ListingDto;

import com.google.gwt.user.server.rpc.RemoteServiceServlet;

/**
 * The server side implementation of the RPC service.
 */
@SuppressWarnings("serial")
public class SoNetServletImpl extends RemoteServiceServlet implements SoNetServlet {
	static {
		if(FenixFramework.getConfig()==null) {
			FenixFramework.initialize(new Config() {{
				domainModelPath="src/main/dml/sonet.dml";
				dbAlias = "//localhost:3306/sonetdb"; 
				dbUsername = "sonet";
				dbPassword = "s0n3t";
				domainModelPath="dml/sonet.dml";
				rootClass=SoNet.class;
			}});
		}
	}
	public String greetServer(String input, String pass) throws IllegalArgumentException {
		// Verify that the input is valid. 
		if (!FieldVerifier.isValidName(input)) {
			// If the input is not valid, throw an IllegalArgumentException back to
			// the client.
			throw new IllegalArgumentException(
					"Name must be at least 4 characters long");
		}
		if (!FieldVerifier.isValidName(pass)) {
			// If the input is not valid, throw an IllegalArgumentException back to
			// the client.
			throw new IllegalArgumentException(
					"Name must be at least 4 characters long");
		}

		String serverInfo = getServletContext().getServerInfo();
		String userAgent = getThreadLocalRequest().getHeader("User-Agent");

		// Escape data from the client to avoid cross-site script vulnerabilities.
		input = escapeHtml(input);
		userAgent = escapeHtml(userAgent);
		
		return "Hello, " + input + "!<br>Your password is: "+pass+"<br>I am running " + serverInfo
				+ ".<br><br>It looks like you are using:<br>" + userAgent;
	}

	/**
	 * Escape an html string. Escaping data received from the client helps to
	 * prevent cross-site script vulnerabilities.
	 * 
	 * @param html the html string to escape
	 * @return the escaped string
	 */
	private String escapeHtml(String html) {
		if (html == null) {
			return null;
		}
		return html.replaceAll("&", "&amp;").replaceAll("<", "&lt;")
				.replaceAll(">", "&gt;");
	}
	
	public ListingDto displaySonet() {
		
		ListingDto list = new ListingDto();
		ListAllService service = new ListAllService(list);
		
		service.execute();
		
		return list;
		
	}
	
	public Boolean agentLogin(String username, String password){
		BooleanDto dto = new BooleanDto();
		AgentLoginService service = new AgentLoginService(username, password, dto);

		service.execute();

		return dto.getValue();
	}
	
	public void addNote(String username, String label, String text){
		AddNoteService service = new AddNoteService(username, label, text);

		service.execute();
	}
	
	public AgentListDto getFriends(String username){
		AgentListDto dto = new AgentListDto();
		FriendsOfAgentService service = new FriendsOfAgentService(username, dto);
		service.execute();
		return dto;
	}
	
	public ListingDto getPublications(String from, String asking){
		ListingDto pubdto = new ListingDto();
		GetAllPublicationsService service = new GetAllPublicationsService(from, asking, pubdto);
		service.execute();
		return pubdto;
	}
}
