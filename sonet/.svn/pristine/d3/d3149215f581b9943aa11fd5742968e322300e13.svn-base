package pt.ist.sonet.presentation.client;




import java.util.ArrayList;


import pt.ist.sonet.exception.YouArentAFriendException;
import pt.ist.sonet.presentation.shared.FieldVerifier;
import pt.ist.sonet.service.dto.PublicationListDto;
import pt.ist.sonet.service.dto.StringListDto;
import pt.ist.sonet.service.dto.ListingDto;
import pt.ist.sonet.service.dto.PublicationDto;


import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.KeyCodes;
import com.google.gwt.event.dom.client.KeyUpEvent;
import com.google.gwt.event.dom.client.KeyUpHandler;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.DialogBox;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.PasswordTextBox;
import com.google.gwt.user.client.ui.TabPanel;
import com.google.gwt.user.client.ui.TabLayoutPanel;
import com.google.gwt.dom.client.Style.Unit;
import com.google.gwt.user.client.ui.DecoratedTabPanel;
import com.google.gwt.user.client.ui.TabBar;
import com.google.gwt.user.client.ui.HasHorizontalAlignment;
import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.Hidden;
import com.google.gwt.user.cellview.client.CellList;
import com.google.gwt.user.cellview.client.CellTable;
import com.google.gwt.user.cellview.client.Column;
import com.google.gwt.user.cellview.client.TextColumn;
import com.google.gwt.cell.client.AbstractCell;
import com.google.gwt.cell.client.Cell.Context;
import com.google.gwt.cell.client.NumberCell;
import com.google.gwt.safehtml.shared.SafeHtml;
import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
import com.google.gwt.safehtml.shared.SafeHtmlUtils;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.NumberLabel;
import com.google.gwt.user.client.ui.HasVerticalAlignment;
import com.google.gwt.user.client.ui.AbsolutePanel;
import com.google.gwt.view.client.SelectionChangeEvent;
import com.google.gwt.view.client.SingleSelectionModel;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class SonetGWT implements EntryPoint {
		
	/**
	 * The message displayed to the user when the server cannot be reached or
	 * returns an error.
	 */
	private static final String SERVER_ERROR = "An error occurred while "
			+ "attempting to contact the server. Please check your network "
			+ "connection and try again.";
	private static final String LOGIN_FAIL = "Wrong username or password. Try again...";
	private static final String LOGIN_OK = "You are now logged in as ";
	private static final String NOTE_ERROR = "An error occurred while posting your Text Note. Try again...";
	private static final String NOTE_OK = "Your Text Note was successfully added.";
	private static final String FRIENDS_ERROR = "An error occurred while fetching your friends. Try again...";
	private static final String FRIENDS_INFO = "Friends of ";
	private static final String PUBLICATIONS_ERROR = "An error ocurred while fetching the publications. Try again...";
	private static final String PUBLICATIONS_INFO = "Publications of ";
	private static final String PUBLICATIONS_PUBID_SELECTED = "Selected publication with id: ";

	private static final String PUBLICATIONS_NOUSER = "No user selected.";
	private static final String PUBLICATIONS_NOT_FIREND_ERROR = "Sorry you don't have access to information of ";
	private static final String AGENTS_ERROR = "An error ocurred while fetching the agents listing. Try again...";
	private static final String NO_AGENTS = "There are no registered Agents at this moment.";
	
	private String _active = null;
	private String _selected = null;
	private int _publiationId = -1;
	/**
	 * Create a remote service proxy to talk to the server-side Greeting service.
	 */
	private final SoNetServletAsync greetingService = GWT
			.create(SoNetServlet.class);
	private final SoNetServletAsync sonetServlet = GWT.create(SoNetServlet.class);
	/**
	 * This is the entry point method.
	 */
	public void onModuleLoad() {
		final Label errorLabel = new Label();

		// Add the nameField and sendButton to the RootPanel
		// Use RootPanel.get() to get the entire body element
		RootPanel rootPanel = RootPanel.get();
		//RootPanel.get("errorLabelContainer").add(errorLabel);
		
		DecoratedTabPanel decoratedTabPanel = new DecoratedTabPanel();
		rootPanel.add(decoratedTabPanel, 16, 107);
		decoratedTabPanel.setSize("735px", "451px");
				
				final Button sendButton = new Button("Send");
				decoratedTabPanel.add(sendButton, "Greet", false);
				sendButton.setSize("94px", "49px");
				// We can add style names to widgets
				sendButton.addStyleName("sendButton");
				
				final Grid loginGrid = new Grid(3, 2);
				decoratedTabPanel.add(loginGrid, "Login", false);
				loginGrid.setSize("553px", "253px");
				
				final Label loginUserLabel = new Label("Username:");
				loginGrid.setWidget(0, 0, loginUserLabel);
				loginUserLabel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
				loginUserLabel.setWidth("87px");
				
				Grid grid_2 = new Grid(1, 1);
				loginGrid.setWidget(0, 1, grid_2);
				final TextBox nameField = new TextBox();
				grid_2.setWidget(0, 0, nameField);
				nameField.setWidth("154px");
				
				nameField.selectAll();
				
				Grid grid_1 = new Grid(1, 1);
				loginGrid.setWidget(1, 0, grid_1);
				
				Label loginPasswordlabel = new Label("Password:");
				grid_1.setWidget(0, 0, loginPasswordlabel);
				final PasswordTextBox pswrdtxtbxPassword = new PasswordTextBox();
				loginGrid.setWidget(1, 1, pswrdtxtbxPassword);
				pswrdtxtbxPassword.setWidth("154px");
				
				Grid grid_3 = new Grid(1, 1);
				loginGrid.setWidget(2, 0, grid_3);
				final Button loginButton = new Button("Login");
				loginButton.setStyleName("sendButton");
				grid_3.setWidget(0, 0, loginButton);
				
				Grid noteGrid = new Grid(3, 2);
				decoratedTabPanel.add(noteGrid, "Add Text Note", false);
				noteGrid.setSize("506px", "261px");
				
				Label noteLabelLabel = new Label("Label:");
				noteGrid.setWidget(0, 0, noteLabelLabel);
				
				Grid grid_5 = new Grid(1, 1);
				noteGrid.setWidget(0, 1, grid_5);
				
				final TextBox noteLabelTextbox = new TextBox();
				grid_5.setWidget(0, 0, noteLabelTextbox);
				
				Grid grid_6 = new Grid(1, 1);
				noteGrid.setWidget(1, 0, grid_6);
				
				Label noteTextLabel = new Label("Text:");
				grid_6.setWidget(0, 0, noteTextLabel);
				
				Grid grid_8 = new Grid(1, 1);
				noteGrid.setWidget(1, 1, grid_8);
				
				final TextBox noteTextTextbox = new TextBox();
				grid_8.setWidget(0, 0, noteTextTextbox);
				
				final Button noteButton = new Button("Add Note");
				noteGrid.setWidget(2, 0, noteButton);
				
				Grid grid_7 = new Grid(1, 1);
				noteGrid.setWidget(2, 1, grid_7);
				
				final Label noteErrorLabel = new Label("");
				noteErrorLabel.setStyleName("serverResponseLabelError");
				grid_7.setWidget(0, 0, noteErrorLabel);
				
				Grid friendGrid = new Grid(2, 2);
				decoratedTabPanel.add(friendGrid, "Friends", false);
				friendGrid.setSize("585px", "302px");
				
				Label lblPressLoadTo = new Label("Press Load to fetch your friend list.");
				friendGrid.setWidget(0, 0, lblPressLoadTo);
				
				Grid grid = new Grid(1, 1);
				friendGrid.setWidget(0, 1, grid);
				
				Button friendsButton = new Button("Load");
				grid.setWidget(0, 0, friendsButton);
				
				Grid grid_4 = new Grid(1, 1);
				friendGrid.setWidget(1, 0, grid_4);
				grid_4.setWidth("307px");
				
				final ListBox friendList = new ListBox();
				grid_4.setWidget(0, 0, friendList);
				friendList.setWidth("302px");
				friendList.setVisibleItemCount(5);
				
				final Label friendsOfLabel = new Label("");
				friendGrid.setWidget(1, 1, friendsOfLabel);
				
				final Button listButton = new Button("List SoNet");
				decoratedTabPanel.add(listButton, "Listar SoNet", false);
				listButton.setSize("100px", "45px");
						
				// Focus the cursor on the name field when the app loads
				listButton.setFocus(true);
				
				Grid donateGrid = new Grid(3, 2);
				decoratedTabPanel.add(donateGrid, "Donate", false);
				donateGrid.setSize("590px", "307px");
				
				Grid grid_9 = new Grid(1, 2);
				donateGrid.setWidget(0, 0, grid_9);
				
				Label donateOrganiztionLabel = new Label("Select an Organization");
				grid_9.setWidget(0, 1, donateOrganiztionLabel);
				
				Grid grid_40 = new Grid(1, 1);
				donateGrid.setWidget(0, 1, grid_40);
				
				ListBox donateList = new ListBox();
				grid_40.setWidget(0, 0, donateList);
				donateList.setWidth("249px");
				donateList.setVisibleItemCount(5);
				
				Grid grid_11 = new Grid(1, 1);
				donateGrid.setWidget(1, 0, grid_11);
				
				Label donateAmountLabel = new Label("amount");
				grid_11.setWidget(0, 0, donateAmountLabel);
				
				NumberLabel<Integer> donateTextbox = new NumberLabel<Integer>();
				donateGrid.setWidget(1, 1, donateTextbox);
				
				Grid grid_12 = new Grid(1, 1);
				donateGrid.setWidget(2, 0, grid_12);
				
				Button donateButton = new Button("Donate");
				grid_12.setWidget(0, 0, donateButton);
				
				Label donateErrorLabel = new Label("");
				donateGrid.setWidget(2, 1, donateErrorLabel);
				donateGrid.getCellFormatter().setVerticalAlignment(2, 1, HasVerticalAlignment.ALIGN_TOP);
				
				Grid publicationsGrid = new Grid(1, 1);
				decoratedTabPanel.add(publicationsGrid, "Publications", false);
				publicationsGrid.setSize("719px", "408px");
				
				TabPanel publicationMainTab = new TabPanel();
				publicationsGrid.setWidget(0, 0, publicationMainTab);
				publicationMainTab.setSize("710px", "403px");
				
				Grid chooseAgentGrid = new Grid(2, 2);
				publicationMainTab.add(chooseAgentGrid, "Agent", false);
				chooseAgentGrid.setSize("569px", "254px");
				
				Label chooseAgentLabel = new Label("Select an Agent");
				chooseAgentGrid.setWidget(0, 0, chooseAgentLabel);
				
				Grid grid_14 = new Grid(1, 1);
				chooseAgentGrid.setWidget(0, 1, grid_14);
				
				final ListBox publicationAgentList = new ListBox();
				grid_14.setWidget(0, 0, publicationAgentList);
				publicationAgentList.setSize("285px", "188px");
				publicationAgentList.setVisibleItemCount(5);
				
				Grid grid_13 = new Grid(1, 1);
				chooseAgentGrid.setWidget(1, 0, grid_13);
				
				Grid grid_17 = new Grid(1, 3);
				grid_13.setWidget(0, 0, grid_17);
				
				final Button publicationUpdateAgentListButton = new Button("Update List");
				grid_17.setWidget(0, 1, publicationUpdateAgentListButton);
				
				final Button publicationAgentSelectButton = new Button("Select");
				publicationAgentSelectButton.addClickHandler(new ClickHandler() {
					public void onClick(ClickEvent event) {
						if(publicationAgentList.getSelectedIndex()>-1){
							publicationAgentSelectButton.setEnabled(false);
							publicationUpdateAgentListButton.setEnabled(false);
							_selected=publicationAgentList.getValue(publicationAgentList.getSelectedIndex());
						}
					}
				});
				publicationAgentSelectButton.setText("Select");
				grid_17.setWidget(0, 0, publicationAgentSelectButton);
				
				
				Button publicationAgentClearButton = new Button("Clear");
				publicationAgentClearButton.addClickHandler(new ClickHandler() {
					public void onClick(ClickEvent event) {
						publicationAgentSelectButton.setEnabled(true);
						publicationUpdateAgentListButton.setEnabled(true);
						publicationAgentList.clear();
						publicationAgentList.setSelectedIndex(-1);
						_selected=null;
					}
				});
				grid_17.setWidget(0, 2, publicationAgentClearButton);
				
				final Label publicationAgentError = new Label("");
				publicationAgentError.setStyleName("serverResponseLabelError");
				chooseAgentGrid.setWidget(1, 1, publicationAgentError);
				chooseAgentGrid.getCellFormatter().setVerticalAlignment(1, 1, HasVerticalAlignment.ALIGN_BOTTOM);
				chooseAgentGrid.getCellFormatter().setHorizontalAlignment(1, 1, HasHorizontalAlignment.ALIGN_LEFT);
				
				AbsolutePanel choosePublicationGrid = new AbsolutePanel();
				publicationMainTab.add(choosePublicationGrid, "Publications", false);
				choosePublicationGrid.setSize("696px", "346px");
				
				Grid grid_10 = new Grid(1, 3);
				choosePublicationGrid.add(grid_10, 44, 287);
				grid_10.setSize("109px", "36px");
				
				final CellTable<PublicationDto> publicationPublicationsCell = new CellTable<PublicationDto>();
				choosePublicationGrid.add(publicationPublicationsCell, 23, 10);
				publicationPublicationsCell.setSize("587px", "215px");
				// Add a number column to show the id.
			      Column<PublicationDto, Number> publicationIdColum = 
			      new Column<PublicationDto, Number>(new NumberCell()) {
			         @Override
			         public Integer getValue(PublicationDto object) {
			            return object.getId();
			         }
			      };
			      publicationIdColum.setSortable(true);
			      publicationPublicationsCell.addColumn(publicationIdColum, "ID");
			      publicationPublicationsCell.setColumnWidth(publicationIdColum, "37px");
			   // Add a text column to show the publication string.
			      TextColumn<PublicationDto> publicationTextColum = 
			      new TextColumn<PublicationDto>() {
			         @Override
			         public String getValue(PublicationDto object) {
			            return object.getLabel()+" | "+object.getPositive()+" | "+object.getNegative()+" | "+object.getComents();
			         }
			      };
			      publicationPublicationsCell.addColumn(publicationTextColum, "Publication");
			      // Add a selection model to handle user selection.
			      final SingleSelectionModel<PublicationDto> selectionModel 
			      = new SingleSelectionModel<PublicationDto>();
			      publicationPublicationsCell.setSelectionModel(selectionModel);
			      selectionModel.addSelectionChangeHandler(
			      new SelectionChangeEvent.Handler() {
			         public void onSelectionChange(SelectionChangeEvent event) {
			            PublicationDto selected = selectionModel.getSelectedObject();
			            _publiationId = selected.getId();
			            }
			         }
			      );
			      
				final Button publicationPublicationsUpdateButton = new Button("Update");
				grid_10.setWidget(0, 1, publicationPublicationsUpdateButton);
				
				final Label publicationPublicationSelectedLabel = new Label("");
				choosePublicationGrid.add(publicationPublicationSelectedLabel, 251, 305);
				
				final Button publicationSelectPublicationButton = new Button("Select");
				publicationSelectPublicationButton.addClickHandler(new ClickHandler() {
					public void onClick(ClickEvent event) {
						if(_publiationId>=0){
							publicationSelectPublicationButton.setEnabled(false);
							publicationPublicationsUpdateButton.setEnabled(false);
							publicationPublicationSelectedLabel.setText(PUBLICATIONS_PUBID_SELECTED+_publiationId);
						}
					}
				});
				grid_10.setWidget(0, 0, publicationSelectPublicationButton);

				
				Button publicationPublicationsClearButton = new Button("Clear");
				publicationPublicationsClearButton.addClickHandler(new ClickHandler() {
					public void onClick(ClickEvent event) {
						publicationSelectPublicationButton.setEnabled(true);
						publicationPublicationsUpdateButton.setEnabled(true);
						publicationPublicationsCell.setRowData(new ArrayList<PublicationDto>());
						_publiationId=-1;
						publicationPublicationSelectedLabel.setText("");

					}
				});
				grid_10.setWidget(0, 2, publicationPublicationsClearButton);
				
				final Label publicationPublicationsOfLabel = new Label("No user selected");
				choosePublicationGrid.add(publicationPublicationsOfLabel, 44, 245);
				
				final Label publicationPublicationsErrorLabel = new Label("");
				publicationPublicationsErrorLabel.setStyleName("serverResponseLabelError");
				choosePublicationGrid.add(publicationPublicationsErrorLabel, 239, 305);
				
				
				AbsolutePanel publicationViewTab = new AbsolutePanel();
				publicationMainTab.add(publicationViewTab, "View", false);
				publicationViewTab.setSize("702px", "367px");
				
				Grid grid_18 = new Grid(6, 2);
				publicationViewTab.add(grid_18, 10, 10);
				grid_18.setSize("295px", "204px");
				
				Label label_1 = new Label("Type");
				grid_18.setWidget(0, 0, label_1);
				
				Label label_2 = new Label("empty");
				grid_18.setWidget(0, 1, label_2);
				
				Label label_3 = new Label("Label");
				grid_18.setWidget(1, 0, label_3);
				
				Label label_4 = new Label("empty");
				grid_18.setWidget(1, 1, label_4);
				
				Label label_5 = new Label("Content");
				grid_18.setWidget(2, 0, label_5);
				
				Label label_6 = new Label("empty");
				grid_18.setWidget(2, 1, label_6);
				
				Label label_7 = new Label("Price");
				grid_18.setWidget(3, 0, label_7);
				
				Label label_8 = new Label("NA");
				grid_18.setWidget(3, 1, label_8);
				
				Label label_9 = new Label("Author");
				grid_18.setWidget(4, 0, label_9);
				
				Label label_10 = new Label("empty");
				grid_18.setWidget(4, 1, label_10);
				
				Label label_11 = new Label("Votes");
				grid_18.setWidget(5, 0, label_11);
				
				Label label_12 = new Label("empty");
				grid_18.setWidget(5, 1, label_12);
				
				ListBox publicationCommentList = new ListBox();
				publicationViewTab.add(publicationCommentList, 338, 10);
				publicationCommentList.setSize("350px", "180px");
				publicationCommentList.setVisibleItemCount(8);
				
				Label label_13 = new Label("Comment Text");
				publicationViewTab.add(label_13, 345, 196);
				
				TextBox textBox = new TextBox();
				publicationViewTab.add(textBox, 441, 196);
				textBox.setSize("237px", "76px");
				
				Button publicationBuyButton = new Button("Buy Content");
				publicationViewTab.add(publicationBuyButton, 10, 327);
				
				Button publiactionUpdateButton = new Button("Update Information");
				publicationViewTab.add(publiactionUpdateButton, 104, 327);
				
				Button publicationPositiveVoteButton = new Button("Positive Vote");
				publicationViewTab.add(publicationPositiveVoteButton, 236, 327);
				
				Button publicationNegativeVote = new Button("Negative Vote");
				publicationViewTab.add(publicationNegativeVote, 336, 327);
				
				Button publicationCommentButton = new Button("Post Comment");
				publicationViewTab.add(publicationCommentButton, 437, 327);
				
				Grid logoutGrid = new Grid(1, 1);
				decoratedTabPanel.add(logoutGrid, "Logout", false);
				logoutGrid.setSize("5cm", "3cm");
				
				Button logoutButton = new Button("Logout");
				logoutButton.addClickHandler(new ClickHandler() {
					public void onClick(ClickEvent event) {
						_active=null;
						
					}
				});
				logoutButton.setStyleName("sendButton");
				logoutGrid.setWidget(0, 0, logoutButton);
				
		
				Label headLabel = new Label("Select an option by opening a Tab");
				headLabel.setStyleName("gwt-DialogBox");
				rootPanel.add(headLabel, 184, 83);

		// Create the popup dialog box
		final DialogBox dialogBox = new DialogBox();
		dialogBox.setText("Remote Procedure Call");
		dialogBox.setAnimationEnabled(true);
		final Button closeButton = new Button("Close");
		// We can set the id of a widget by accessing its Element
		closeButton.getElement().setId("closeButton");
		final Label textToServerLabel = new Label();
		final Label passToServerLabel = new Label();
		final HTML serverResponseLabel = new HTML();
		VerticalPanel dialogVPanel = new VerticalPanel();
		dialogVPanel.addStyleName("dialogVPanel");
		dialogVPanel.add(new HTML("SoNet:</b>"));
		dialogVPanel.add(serverResponseLabel);
		dialogVPanel.setHorizontalAlignment(VerticalPanel.ALIGN_RIGHT);
		dialogVPanel.add(closeButton);
		dialogBox.setWidget(dialogVPanel);

		// Add a handler to close the DialogBox
		closeButton.addClickHandler(new ClickHandler() {
			public void onClick(ClickEvent event) {
				dialogBox.hide();
				sendButton.setEnabled(true);
				sendButton.setFocus(true);
			}
		});

		//handler para listagem da Sonet
		
		class ListSonetHandler implements ClickHandler, KeyUpHandler {
			/**
			 * Fired when the user clicks on the sendButton.
			 */
			public void onClick(ClickEvent event) {
				requestSonetList();
			}

			/**
			 * Fired when the user types in the nameField.
			 */
			public void onKeyUp(KeyUpEvent event) {
				if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
					requestSonetList();
				}
			}

			/**
			 * Send the name from the nameField to the server and wait for a response.
			 */
			private void requestSonetList() {
				// Then, we send the input to the server.
				sendButton.setEnabled(false);
				sonetServlet.displaySonet(new AsyncCallback<ListingDto>() {
					public void onFailure(Throwable caught) {
						// Show the RPC error message to the user
						dialogBox.setText("Remote Procedure Call - Failure");
						serverResponseLabel.addStyleName("serverResponseLabelError");
						serverResponseLabel.setHTML(SERVER_ERROR);
						dialogBox.center();
						closeButton.setFocus(true);
					}

					public void onSuccess(ListingDto result) {
						dialogBox.setText("Remote Procedure Call");
						serverResponseLabel.removeStyleName("serverResponseLabelError");
						serverResponseLabel.setHTML(result.getlisting().toString());
						dialogBox.center();
						closeButton.setFocus(true);
					}
			
				});
				
			}
		}
		
		// Create a handler for the sendButton and nameField
		class MyHandler implements ClickHandler, KeyUpHandler {
			/**
			 * Fired when the user clicks on the sendButton.
			 */
			public void onClick(ClickEvent event) {
				sendNameToServer();
			}

			/**
			 * Fired when the user types in the nameField.
			 */
			public void onKeyUp(KeyUpEvent event) {
				if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
					sendNameToServer();
				}
			}

			/**
			 * Send the name from the nameField to the server and wait for a response.
			 */
			private void sendNameToServer() {
				// First, we validate the input.
				errorLabel.setText("");
				String textToServer = nameField.getText();
				String passToServer = pswrdtxtbxPassword.getText();
				if (!FieldVerifier.isValidName(textToServer)) {
					errorLabel.setText("Please enter at least four characters");
					return;
				}
				if (!FieldVerifier.isValidName(passToServer)) {
					errorLabel.setText("Please enter your password");
					return;
				}

				// Then, we send the input to the server.
				sendButton.setEnabled(false);
				textToServerLabel.setText(textToServer);
				passToServerLabel.setText(passToServer);
				serverResponseLabel.setText("");
				greetingService.greetServer(textToServer,passToServer,
						new AsyncCallback<String>() {
							public void onFailure(Throwable caught) {
								// Show the RPC error message to the user
								dialogBox
										.setText("Remote Procedure Call - Failure");
								serverResponseLabel
										.addStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(SERVER_ERROR);
								dialogBox.center();
								closeButton.setFocus(true);
							}

							public void onSuccess(String result) {
								dialogBox.setText("Remote Procedure Call");
								serverResponseLabel
										.removeStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(result);
								dialogBox.center();
								closeButton.setFocus(true);
							}
						});
			}
		}
		
		
		// Create a handler for the sendButton and nameField
		class AgentLoginHandler implements ClickHandler, KeyUpHandler {
			/**
			 * Fired when the user clicks on the sendButton.
			 */
			public void onClick(ClickEvent event) {
				login();
			}

			/**
			 * Fired when the user types in the nameField.
			 */
			public void onKeyUp(KeyUpEvent event) {
				if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
					login();
				}
			}

			/**
			 * login with as an Active Agent.
			 */
			private void login() {
				// First, we validate the input.
				errorLabel.setText("");
				final String textToServer = nameField.getText();
				String passToServer = pswrdtxtbxPassword.getText();
				if (!FieldVerifier.isValidUsername(textToServer)) {
					errorLabel.setText("Please enter at least four characters");
					return;
				}
				if (!FieldVerifier.isValidPassword(passToServer)) {
					errorLabel.setText("Please enter your password");
					return;
				}

				// Then, we send the input to the server.
				sendButton.setEnabled(false);
				nameField.setText(null);
				pswrdtxtbxPassword.setText(null);
				serverResponseLabel.setText("");
				sonetServlet.agentLogin(textToServer,passToServer,
						new AsyncCallback<Boolean>() {
							public void onFailure(Throwable caught) {
								_active=null;
								// Show the RPC error message to the user
								dialogBox.setText("Login Failure");
								serverResponseLabel.addStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(LOGIN_FAIL);
								dialogBox.center();
								closeButton.setFocus(true);
							}

							public void onSuccess(Boolean result) {
								_active = textToServer;
								dialogBox.setText("Successful Login");
								serverResponseLabel.removeStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(LOGIN_OK+textToServer);
								dialogBox.center();
								closeButton.setFocus(true);
							}
						});
			}
		}
		
		
		// Create a handler for the noteButton
		class AddNoteHandler implements ClickHandler, KeyUpHandler {
			/**
			 * Fired when the user clicks on the sendButton.
			 */
			public void onClick(ClickEvent event) {
				addNote();
			}

			/**
			 * Fired when the user types in the nameField.
			 */
			public void onKeyUp(KeyUpEvent event) {
				if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
					addNote();
				}
			}
			/**
			 * login with as an Active Agent.
			 */
			private void addNote() {
				// First, we validate the input.
				noteErrorLabel.setText("");
				String label = noteLabelTextbox.getText();
				String text = noteTextTextbox.getText();
				if (!FieldVerifier.isValidText(label)) {
					noteErrorLabel.setText("Note's label is a required field.");
					return;
				}
				if (!FieldVerifier.isValidText(text)) {
					noteErrorLabel.setText("Note's text is a required field.");
					return;
				}
				if (_active==null) {
					dialogBox.setText("Add Note Failure");
					serverResponseLabel.addStyleName("serverResponseLabelError");
					serverResponseLabel.setHTML("No user logged in. Please login first.");
					dialogBox.center();
					closeButton.setFocus(true);
					return;
				}

				// Then, we send the input to the server.
				noteLabelTextbox.setText(null);
				noteTextTextbox.setText(null);
				sonetServlet.addNote(_active, label, text,
						new AsyncCallback<Void>() {
							public void onFailure(Throwable caught) {
								// Show the the error to the user
								dialogBox.setText("Login Failure");
								serverResponseLabel.addStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(NOTE_ERROR);
								dialogBox.center();
								closeButton.setFocus(true);
							}

							public void onSuccess(Void v) {
								dialogBox.setText("A new Text Note was added!");
								serverResponseLabel.removeStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(NOTE_OK);
								dialogBox.center();
								closeButton.setFocus(true);
							}
						});
			}
			
			
		}
		
		// Create a handler for the noteButton
		class FriendsHandler implements ClickHandler, KeyUpHandler {
			/**
			 * Fired when the user clicks on the sendButton.
			 */
			public void onClick(ClickEvent event) {
				getFriends();
			}

			/**
			 * Fired when the user types in the nameField.
			 */
			public void onKeyUp(KeyUpEvent event) {
				if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
					getFriends();
				}
			}
			/**
			 * login with as an Active Agent.
			 */
			private void getFriends() {
				// First, we validate the input.
				noteErrorLabel.setText("");
				friendList.clear();
				friendsOfLabel.setText(null);
				if (_active==null) {
					dialogBox.setText("List Friends Failure");
					serverResponseLabel.addStyleName("serverResponseLabelError");
					serverResponseLabel.setHTML("No user logged in. Please login first.");
					dialogBox.center();
					closeButton.setFocus(true);
					return;
				}

				// Then, we send the input to the server.
				sonetServlet.getFriends(_active,
						new AsyncCallback<StringListDto>() {
							public void onFailure(Throwable caught) {
								// Show the the error to the user
								dialogBox.setText("Login Failure");
								serverResponseLabel.addStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(FRIENDS_ERROR);
								dialogBox.center();
								closeButton.setFocus(true);
							}

							public void onSuccess(StringListDto dto) {
								friendsOfLabel.setText(FRIENDS_INFO+_active);
								if(dto.getlisting().isEmpty()){
									friendList.addItem("Agent doesn't have friends");
									return;
								}
								for(String s : dto.getlisting()){									
									friendList.addItem(s);
								}
							}
						});
			}
		
		
			
		}
		
		
		// Create a handler for the AgentList Update button
		class PublicationAgentListHandler implements ClickHandler, KeyUpHandler {
			/**
			 * Fired when the user clicks on the sendButton.
			 */
			public void onClick(ClickEvent event) {
				getAgents();
			}
	
			/**
			 * Fired when the user types in the nameField.
			 */
			public void onKeyUp(KeyUpEvent event) {
				if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
					getAgents();
				}
			}
			/**
			 * login with as an Active Agent.
			 */
			private void getAgents() {
				// First, we validate the input.
				noteErrorLabel.setText("");
				publicationAgentList.clear();
				if (_active==null) {
					dialogBox.setText("List Publications Failure");
					serverResponseLabel.addStyleName("serverResponseLabelError");
					serverResponseLabel.setHTML("No user logged in. Please login first.");
					dialogBox.center();
					closeButton.setFocus(true);
					return;
				}
	
				// Then, we send the input to the server.
				sonetServlet.getAgents(new AsyncCallback<StringListDto>() {
							public void onFailure(Throwable caught) {
								// Show the the error to the user
								dialogBox.setText("Login Failure");
								serverResponseLabel.addStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(AGENTS_ERROR);
								dialogBox.center();
								closeButton.setFocus(true);
							}
	
							public void onSuccess(StringListDto dto) {
								if(dto.getlisting().isEmpty()){
									publicationAgentError.setText(NO_AGENTS);
									return;
								}
								for(String s : dto.getlisting()){									
									publicationAgentList.addItem(s);
								}
							}
						});
			}
		}
		
		
		
		// Create a handler for the noteButton
		class PublicationsHandler implements ClickHandler, KeyUpHandler {
			/**
			 * Fired when the user clicks on the sendButton.
			 */
			public void onClick(ClickEvent event) {
				getPublications();
			}

			/**
			 * Fired when the user types in the nameField.
			 */
			public void onKeyUp(KeyUpEvent event) {
				if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
					getPublications();
				}
			}
			/**
			 * login with as an Active Agent.
			 */
			private void getPublications() {
				// First, we validate the input.
				noteErrorLabel.setText("");
				publicationPublicationsOfLabel.setText(PUBLICATIONS_NOUSER);
				if (_active==null) {
					dialogBox.setText("List Publications Failure");
					serverResponseLabel.addStyleName("serverResponseLabelError");
					serverResponseLabel.setHTML("No user logged in. Please login first.");
					dialogBox.center();
					closeButton.setFocus(true);
					return;
				}
				if (_selected==null) {
					dialogBox.setText("List Publications Failure");
					serverResponseLabel.addStyleName("serverResponseLabelError");
					serverResponseLabel.setHTML("No Agent selected. Please select an Agent in the Agents tab and try again.");
					dialogBox.center();
					closeButton.setFocus(true);
					return;
				}

				// Then, we send the input to the server.
				sonetServlet.getPublicationList(_selected, 
						_active, new AsyncCallback<ArrayList<PublicationDto>>() {
							public void onFailure(Throwable caught) {
								// Show the the error to the user
								
								dialogBox.setText("List Publications of "+_selected);
								serverResponseLabel.addStyleName("serverResponseLabelError");
								if(caught instanceof YouArentAFriendException){
									serverResponseLabel.setHTML(PUBLICATIONS_NOT_FIREND_ERROR+_selected);
								}
								else serverResponseLabel.setHTML(PUBLICATIONS_ERROR);
								dialogBox.center();
								closeButton.setFocus(true);
							}

							public void onSuccess(ArrayList<PublicationDto> dto) {
								publicationPublicationsOfLabel.setText(PUBLICATIONS_INFO+_selected);
								if(dto.isEmpty()){
									//publicationPublicationsErrorLabel.setText("Agent doesn't have publications");
									publicationPublicationsErrorLabel.setText(dto.toString());
									return;
								}
								publicationPublicationsCell.setRowData(dto);
								//publicationPublicationsCell.redraw();
//								for(PublicationDto s : dto.getlisting()){									
//									publicationPublicationsCell.add
//								}
							}
						});
			}
		
		
			
		}

		// Add a handler to send the name to the server
		MyHandler handler = new MyHandler();
		sendButton.addClickHandler(handler);
		nameField.addKeyUpHandler(handler);

		//handler para listar a SoNet
		ListSonetHandler listHandler = new ListSonetHandler();
		listButton.addClickHandler(listHandler);

		//handler para listar os logins
		AgentLoginHandler loginHandler = new AgentLoginHandler();
		loginButton.addClickHandler(loginHandler);
		
		//handler para adicionar nota textual
		AddNoteHandler noteHandler = new AddNoteHandler();
		noteButton.addClickHandler(noteHandler);
		
		//handler para adicionar um amigo
		FriendsHandler friendsHandler = new FriendsHandler();
		friendsButton.addClickHandler(friendsHandler);
		
		//handler para actualizar a lista de agentes
		PublicationAgentListHandler agentListHandler = new PublicationAgentListHandler();
		publicationUpdateAgentListButton.addClickHandler(agentListHandler);
		
		//handler para actualizar a lista de publicacoes de um agente
		PublicationsHandler publicationsHandler = new PublicationsHandler();
		publicationPublicationsUpdateButton.addClickHandler(publicationsHandler);

	}
}
