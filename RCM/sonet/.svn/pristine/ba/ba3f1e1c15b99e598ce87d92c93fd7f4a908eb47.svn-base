package pt.ist.sonet.service;

import java.util.ArrayList;

import pt.ist.fenixframework.pstm.Transaction;
import pt.ist.sonet.domain.Publication;
import pt.ist.sonet.exception.AgentUsernameDoesNotExistsException;
import pt.ist.sonet.exception.OnVoteLimitException;
import pt.ist.sonet.exception.PublicationIdDoesNotExistsException;
import pt.ist.sonet.exception.SoNetException;
import pt.ist.sonet.exception.YouArentAFriendException;
import pt.ist.sonet.service.dto.PublicationViewDto;
import pt.ist.sonet.service.dto.StringListDto;
import pt.ist.sonet.service.*;

public class VotePublicationTestCase extends SonetServiceTestCase {


	private static String ORGANIZATIONAL = "Organizational";
	private static String INDIVIDUAL = "Individual";
	private static String IND_AGENT = "Tiago Manuel";
	private static String IND_AGENT_USER = "tima";
	private static String IND_AGENT_EMAIL = "tima@mail.pt";
	private static String IND_AGENT_PASS = "123tima";
	private static String ORG_AGENT = "Sotinco";
	private static String ORG_AGENT_USER = "sotinco";
	private static String ORG_AGENT_EMAIL = "sotinco_organization@mail.pt";
	private static String ORG_AGENT_PASS = "sotincosorg1";
	private static String IND_AGENT_2 = "Maria José";
	private static String IND_AGENT_2_USER = "mariajose";
	private static String IND_AGENT_2_EMAIL = "mariajose@mail.pt";
	private static String IND_AGENT_2_PASS = "mapass";
	private static String IA1 = "Vitor Jose";
	private static String IA1U="vijo";
	private static String IA1E="vijo@mm.pt";
	private static String IA1P="123vijo";
	private static String IA2 = "Fafa de Arem";
	private static String IA2U="faar";
	private static String IA2E="faar@arem.pt";
	private static String IA2P="123faar";
	private static String IA3 = "Joana Maria";
	private static String IA3U="joma";
	private static String IA3E="joma@portugal.pt";
	private static String IA3P="123joma";
	private static String IA4 = "João Jose";
	private static String IA4U="jojose";
	private static String IA4E="jojose@chile.pt";
	private static String IA4P="123jojose";
	private static String IA5 = "Maria Couves";
	private static String IA5U="maco";
	private static String IA5E="maco@terra.pt";
	private static String IA5P="123terra";
	private static String IA6 = "Esdrovina";
	private static String IA6U="esdro";
	private static String IA6E="esdrovina@terra.pt";
	private static String IA6P="123es";
	private static String CITY = "LISBOA";
	private static String COUNTRY = "PORTUGAL";
	private static String PERMISSION_F = "amigo";
	private static String PERMISSION_P = "publica";
	private static String TEXT = "Bem-vindos a Sotinco";
	private static String TEXT_2 = "Sempre Sempre!!";
	private static String TEXT_3 = "Mesmo muitas coisas";
	private static String LABEL = "Welcome";
	private static String LABEL_2 = "Tudo Tudo";
	private static String LABEL_3 = "Coisas";

	

	public VotePublicationTestCase() {
		super();
	}

	public VotePublicationTestCase(String msg) {
		super(msg);
	}

	@Override
	public void setUp() {
		super.setUp();
		try {
			addAgent(ORGANIZATIONAL, ORG_AGENT_USER,
					ORG_AGENT, ORG_AGENT_EMAIL,
					ORG_AGENT_PASS, CITY, COUNTRY, PERMISSION_P);

			addAgent(INDIVIDUAL, IND_AGENT_USER, IND_AGENT,
					IND_AGENT_EMAIL, IND_AGENT_PASS, CITY,
					COUNTRY, PERMISSION_F);

			addAgent(INDIVIDUAL, IND_AGENT_2_USER, IND_AGENT_2,
					IND_AGENT_2_EMAIL, IND_AGENT_2_PASS, CITY,
					COUNTRY, PERMISSION_P);
			addAgent(INDIVIDUAL, IA1U, IA1,
					IA1E, IA1P, CITY,
					COUNTRY, PERMISSION_P);
			
			addAgent(INDIVIDUAL, IA2U, IA2,
					IA2E, IA2P, CITY,
					COUNTRY, PERMISSION_P);
			
			addAgent(INDIVIDUAL, IA3U, IA3,
					IA3E, IA3P, CITY,
					COUNTRY, PERMISSION_P);
			addAgent(INDIVIDUAL, IA4U, IA4,
					IA4E, IA4P, CITY,
					COUNTRY, PERMISSION_P);
			addAgent(INDIVIDUAL, IA5U, IA5,
					IA5E, IA5P, CITY,
					COUNTRY, PERMISSION_P);
			addAgent(INDIVIDUAL, IA6U, IA6,
					IA6E, IA6P, CITY,
					COUNTRY, PERMISSION_P);
			
			addFriend(IND_AGENT_USER, IND_AGENT_2_USER);
			

			addNote(TEXT, ORG_AGENT_USER, LABEL);

			addNote(TEXT_2, IND_AGENT_USER, LABEL_2);
			
			addNote(TEXT_3, IND_AGENT_2_USER, LABEL_3);


		}

		catch (SoNetException e) {
		}
	}
	/**
	 * Adiciona um voto positivo e outro negativo a uma publicação
	 * o que se espera é um balanço nulo na diferença de votos
	 */
	public void testOneVoteOnPub() {

		// Arrange
		int tempPub;
		int PositiveVotesOnPub;
		int NegativeVotesOnPub;
		int result;
		boolean finalResult;
		GetPublicationByIdService service = new GetPublicationByIdService(IND_AGENT_2_USER, 0);
		PublicationViewDto pub = null;
		// Act
		try {
			service.execute();
			Transaction.begin();
			pub = service.getPublication();
		} catch (AgentUsernameDoesNotExistsException e) {
			fail("Username dont belong to any agent" + e);
		} catch (YouArentAFriendException e) {
			fail("The usernames given dont belong to agents that are friends"
					+ e);
		}
		tempPub = pub.getId();
		Transaction.commit();
		try {
			addNegativeVote(IND_AGENT_2_USER, tempPub);

		} catch (AgentUsernameDoesNotExistsException e) {
			fail("Agent does not exist:" + e.toString());
		} catch (PublicationIdDoesNotExistsException e) {
			fail("Publication does not exist:" + e.toString());
		}catch (OnVoteLimitException e) {

		}
		Transaction.begin();
		pub = service.getPublication();
		tempPub = pub.getId();
		PositiveVotesOnPub =  pub.getPositive();
		NegativeVotesOnPub =  pub.getNegative();
		result= PositiveVotesOnPub - NegativeVotesOnPub;

		finalResult =(result <= 0);
		Transaction.commit();

		
		// Assert
		assertTrue("The number of positive votes isn't correct",
				finalResult);

	}
	
	
	/**
	 * Testa a impossibilidade de votar numa publicacao controversa
	 * adiciona 5 votos negativos para a razao 
	 * entre negativos e positivos ser >5
	 * e demonstra que nao e efectuado o ultimo voto
	 */

	public void testControversialVoteOnPub() {

		// Arrange
		int tempPub;
		int PositiveVotesOnPub;
		int NegativeVotesOnPub;
		int result;
		boolean finalResult;
		GetPublicationByIdService service = new GetPublicationByIdService(IND_AGENT_USER, 2);
		PublicationViewDto pub = null;
		// Act
		try {
			service.execute();
			Transaction.begin();
			pub = service.getPublication();
		} catch (AgentUsernameDoesNotExistsException e) {
			fail("Username dont belong to any agent" + e);
		} catch (YouArentAFriendException e) {
			fail("The usernames given dont belong to agents that are friends"
					+ e);
		}
		tempPub = pub.getId();
		Transaction.commit();
		try {
			addNegativeVote(IA1U, tempPub);
			addNegativeVote(IA2U, tempPub);
			addNegativeVote(IA3U, tempPub);
			addNegativeVote(IA4U, tempPub);
			addNegativeVote(IA5U, tempPub);
			addPositiveVote(IA6U, tempPub);
		} catch (AgentUsernameDoesNotExistsException e) {
			fail("Agent does not exist:" + e.toString());
		} catch (PublicationIdDoesNotExistsException e) {
			fail("Publication does not exist:" + e.toString());
		}catch (OnVoteLimitException e) {

		}
		Transaction.begin();
		pub = service.getPublication();
		tempPub = pub.getId();
		PositiveVotesOnPub =  pub.getPositive();
		NegativeVotesOnPub =  pub.getNegative();
		result= PositiveVotesOnPub - NegativeVotesOnPub;

		finalResult =(result <= 5);
		Transaction.commit();

		
		// Assert
		assertTrue("The number of positive votes isn't correct",
				finalResult);

	}
	




}