/**/
package pt.ist.sonet.service;


import pt.ist.sonet.domain.Individual;
import pt.ist.sonet.domain.Organizational;
import pt.ist.sonet.domain.SoNet;
import pt.ist.sonet.exception.SoNetException;
import pt.ist.fenixframework.FenixFramework;

/**
 * @author ES Grupo 8
 */

public class RegisterAgentService extends SonetService {

	private String agentType;
	private String agentUser;
	private String agentName;
	private String agentEmail;
	private String agentPass;
	private String agentCity;
	private String agentCountry;
	private String agentPermission;
	
	/**
	 * 
	 * Construtor
	 * 
	 * @param String type - tipo de agente "Individual" ou "Organizational"
	 * @param String user 
	 * @param String name 
	 * @param String email 
	 * @param String pass 
	 * @param String city 
	 * @param String nation 
	 * @param String permission 
	 */	
	public RegisterAgentService(String type, String user, String name, String email, String pass, String city, String nation, String permission) {
		agentType = type;
		agentUser = user;
		agentName = name;
		agentEmail = email;
		agentPass = pass;
		agentCity = city;
		agentCountry = nation;
		agentPermission = permission;
	}	
	
	/**
	 *  Faz o dispach do servico
	 *  
	 *  @throws SoNetException
	 */

	@Override
	public void dispatch() throws SoNetException {
		SoNet network = FenixFramework.getRoot();
		
		if(agentType.equals(network.INDIVIDUAL)) {
			Individual agent = network.createIndividualAgent(agentUser, agentName, agentEmail, agentPass, agentCity, agentCountry, agentPermission);
//			if(agentPermission.equals("publica"))
//				agent.changePermission(agentPermission);
			network.addAgent(agent);
		}
		
		if(agentType.equals(network.ORGANIZATIONAL)) {
			Organizational agent = network.createOrganizationalAgent(agentUser, agentName, agentEmail, agentPass, agentCity, agentCountry, agentPermission);
//			if(agentPermission.equals("publica"))
//				agent.changePermission(agentPermission);
			network.addAgent(agent);
		}
		
	}
	
}

