package pt.ist.sonet.presentation.client;




import pt.ist.sonet.presentation.shared.FieldVerifier;
import pt.ist.sonet.service.dto.ListingDto;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.KeyCodes;
import com.google.gwt.event.dom.client.KeyUpEvent;
import com.google.gwt.event.dom.client.KeyUpHandler;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.DialogBox;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.PasswordTextBox;
import com.google.gwt.user.client.ui.TabPanel;
import com.google.gwt.user.client.ui.TabLayoutPanel;
import com.google.gwt.dom.client.Style.Unit;
import com.google.gwt.user.client.ui.DecoratedTabPanel;
import com.google.gwt.user.client.ui.TabBar;
import com.google.gwt.user.client.ui.HasHorizontalAlignment;
import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.Hidden;
import com.google.gwt.user.cellview.client.CellList;
import com.google.gwt.cell.client.AbstractCell;
import com.google.gwt.cell.client.Cell.Context;
import com.google.gwt.safehtml.shared.SafeHtmlBuilder;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class SonetGWT implements EntryPoint {
		
	/**
	 * The message displayed to the user when the server cannot be reached or
	 * returns an error.
	 */
	private static final String SERVER_ERROR = "An error occurred while "
			+ "attempting to contact the server. Please check your network "
			+ "connection and try again.";
	private static final String LOGIN_FAIL = "Wrong username or password. Try again...";
	private static final String LOGIN_OK = "You are now logged in as ";
	private static final String NOTE_ERROR = "An error occurred while posting your Text Note. Try again...";
	private static final String NOTE_OK = "Your Text Note was successfully added.";

	
	private String _active = null;
	/**
	 * Create a remote service proxy to talk to the server-side Greeting service.
	 */
	private final SoNetServletAsync greetingService = GWT
			.create(SoNetServlet.class);
	private final SoNetServletAsync sonetServlet = GWT.create(SoNetServlet.class);
	/**
	 * This is the entry point method.
	 */
	public void onModuleLoad() {
		final Label errorLabel = new Label();

		// Add the nameField and sendButton to the RootPanel
		// Use RootPanel.get() to get the entire body element
		RootPanel rootPanel = RootPanel.get("nameFieldContainer");
		RootPanel.get("errorLabelContainer").add(errorLabel);
		
		DecoratedTabPanel decoratedTabPanel = new DecoratedTabPanel();
		rootPanel.add(decoratedTabPanel, 10, 107);
		decoratedTabPanel.setSize("605px", "350px");
				
				final Button sendButton = new Button("Send");
				decoratedTabPanel.add(sendButton, "Greet", false);
				sendButton.setSize("94px", "49px");
				// We can add style names to widgets
				sendButton.addStyleName("sendButton");
				
				final Grid loginGrid = new Grid(3, 2);
				decoratedTabPanel.add(loginGrid, "Login", false);
				loginGrid.setSize("553px", "253px");
				
				final Label loginUserLabel = new Label("Username:");
				loginGrid.setWidget(0, 0, loginUserLabel);
				loginUserLabel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
				loginUserLabel.setWidth("87px");
				
				Grid grid_2 = new Grid(1, 1);
				loginGrid.setWidget(0, 1, grid_2);
				final TextBox nameField = new TextBox();
				grid_2.setWidget(0, 0, nameField);
				nameField.setWidth("154px");
				
				nameField.selectAll();
				
				Grid grid_1 = new Grid(1, 1);
				loginGrid.setWidget(1, 0, grid_1);
				
				Label loginPasswordlabel = new Label("Password:");
				grid_1.setWidget(0, 0, loginPasswordlabel);
				final PasswordTextBox pswrdtxtbxPassword = new PasswordTextBox();
				loginGrid.setWidget(1, 1, pswrdtxtbxPassword);
				pswrdtxtbxPassword.setWidth("154px");
				
				Grid grid_3 = new Grid(1, 1);
				loginGrid.setWidget(2, 0, grid_3);
				final Button loginButton = new Button("Login");
				loginButton.setStyleName("sendButton");
				grid_3.setWidget(0, 0, loginButton);
				
				Grid noteGrid = new Grid(3, 2);
				decoratedTabPanel.add(noteGrid, "Add Text Note", false);
				noteGrid.setSize("506px", "261px");
				
				Label noteLabelLabel = new Label("Label:");
				noteGrid.setWidget(0, 0, noteLabelLabel);
				
				Grid grid_5 = new Grid(1, 1);
				noteGrid.setWidget(0, 1, grid_5);
				
				final TextBox noteLabelTextbox = new TextBox();
				grid_5.setWidget(0, 0, noteLabelTextbox);
				
				Grid grid_6 = new Grid(1, 1);
				noteGrid.setWidget(1, 0, grid_6);
				
				Label noteTextLabel = new Label("Text:");
				grid_6.setWidget(0, 0, noteTextLabel);
				
				Grid grid_8 = new Grid(1, 1);
				noteGrid.setWidget(1, 1, grid_8);
				
				final TextBox noteTextTextbox = new TextBox();
				grid_8.setWidget(0, 0, noteTextTextbox);
				
				final Button noteButton = new Button("Add Note");
				noteGrid.setWidget(2, 0, noteButton);
				
				Grid grid_7 = new Grid(1, 1);
				noteGrid.setWidget(2, 1, grid_7);
				
				final Label noteErrorLabel = new Label("");
				noteErrorLabel.setStyleName("serverResponseLabelError");
				grid_7.setWidget(0, 0, noteErrorLabel);
				
				Grid friendGrid = new Grid(2, 2);
				decoratedTabPanel.add(friendGrid, "Friends", false);
				friendGrid.setSize("585px", "302px");
				
				Label lblPressLoadTo = new Label("Press Load to fetch your friend list.");
				friendGrid.setWidget(0, 0, lblPressLoadTo);
				
				Grid grid = new Grid(1, 1);
				friendGrid.setWidget(0, 1, grid);
				
				Button btnLoad = new Button("Load");
				grid.setWidget(0, 0, btnLoad);
				
				Grid grid_4 = new Grid(1, 1);
				friendGrid.setWidget(1, 0, grid_4);
				
				CellList<String> cellList = new CellList<String>(new AbstractCell<String>(){
					@Override
					public void render(Context context, String value, SafeHtmlBuilder sb) {
						// TODO
					}
				});
				grid_4.setWidget(0, 0, cellList);
				cellList.setSize("354px", "219px");
				final Button listButton = new Button("List SoNet");
				decoratedTabPanel.add(listButton, "Listar SoNet", false);
				listButton.setSize("100px", "45px");
				
						// Focus the cursor on the name field when the app loads
						listButton.setFocus(true);
						
						Grid logoutGrid = new Grid(1, 1);
						decoratedTabPanel.add(logoutGrid, "Logout", false);
						logoutGrid.setSize("5cm", "3cm");
						
						Button logoutButton = new Button("Logout");
						logoutButton.addClickHandler(new ClickHandler() {
							public void onClick(ClickEvent event) {
								_active=null;
								
							}
						});
						logoutButton.setStyleName("sendButton");
						logoutGrid.setWidget(0, 0, logoutButton);
						
				
				Label lblOption = new Label("Select an option");
				rootPanel.add(lblOption, 84, 50);

		// Create the popup dialog box
		final DialogBox dialogBox = new DialogBox();
		dialogBox.setText("Remote Procedure Call");
		dialogBox.setAnimationEnabled(true);
		final Button closeButton = new Button("Close");
		// We can set the id of a widget by accessing its Element
		closeButton.getElement().setId("closeButton");
		final Label textToServerLabel = new Label();
		final Label passToServerLabel = new Label();
		final HTML serverResponseLabel = new HTML();
		VerticalPanel dialogVPanel = new VerticalPanel();
		dialogVPanel.addStyleName("dialogVPanel");
		dialogVPanel.add(new HTML("<b>Sending name to the server:</b>"));
		dialogVPanel.add(textToServerLabel);
		dialogVPanel.add(passToServerLabel);
		dialogVPanel.add(new HTML("<br><b>Server replies:</b>"));
		dialogVPanel.add(serverResponseLabel);
		dialogVPanel.setHorizontalAlignment(VerticalPanel.ALIGN_RIGHT);
		dialogVPanel.add(closeButton);
		dialogBox.setWidget(dialogVPanel);

		// Add a handler to close the DialogBox
		closeButton.addClickHandler(new ClickHandler() {
			public void onClick(ClickEvent event) {
				dialogBox.hide();
				sendButton.setEnabled(true);
				sendButton.setFocus(true);
			}
		});

		//handler para listagem da Sonet
		
		class ListSonetHandler implements ClickHandler, KeyUpHandler {
			/**
			 * Fired when the user clicks on the sendButton.
			 */
			public void onClick(ClickEvent event) {
				requestSonetList();
			}

			/**
			 * Fired when the user types in the nameField.
			 */
			public void onKeyUp(KeyUpEvent event) {
				if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
					requestSonetList();
				}
			}

			/**
			 * Send the name from the nameField to the server and wait for a response.
			 */
			private void requestSonetList() {
				// Then, we send the input to the server.
				sendButton.setEnabled(false);
				sonetServlet.displaySonet(new AsyncCallback<ListingDto>() {
					public void onFailure(Throwable caught) {
						// Show the RPC error message to the user
						dialogBox.setText("Remote Procedure Call - Failure");
						serverResponseLabel.addStyleName("serverResponseLabelError");
						serverResponseLabel.setHTML(SERVER_ERROR);
						dialogBox.center();
						closeButton.setFocus(true);
					}

					public void onSuccess(ListingDto result) {
						dialogBox.setText("Remote Procedure Call");
						serverResponseLabel.removeStyleName("serverResponseLabelError");
						serverResponseLabel.setHTML(result.getlisting());
						dialogBox.center();
						closeButton.setFocus(true);
					}
			
				});
				
			}
		}
		
		// Create a handler for the sendButton and nameField
		class MyHandler implements ClickHandler, KeyUpHandler {
			/**
			 * Fired when the user clicks on the sendButton.
			 */
			public void onClick(ClickEvent event) {
				sendNameToServer();
			}

			/**
			 * Fired when the user types in the nameField.
			 */
			public void onKeyUp(KeyUpEvent event) {
				if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
					sendNameToServer();
				}
			}

			/**
			 * Send the name from the nameField to the server and wait for a response.
			 */
			private void sendNameToServer() {
				// First, we validate the input.
				errorLabel.setText("");
				String textToServer = nameField.getText();
				String passToServer = pswrdtxtbxPassword.getText();
				if (!FieldVerifier.isValidName(textToServer)) {
					errorLabel.setText("Please enter at least four characters");
					return;
				}
				if (!FieldVerifier.isValidName(passToServer)) {
					errorLabel.setText("Please enter your password");
					return;
				}

				// Then, we send the input to the server.
				sendButton.setEnabled(false);
				textToServerLabel.setText(textToServer);
				passToServerLabel.setText(passToServer);
				serverResponseLabel.setText("");
				greetingService.greetServer(textToServer,passToServer,
						new AsyncCallback<String>() {
							public void onFailure(Throwable caught) {
								// Show the RPC error message to the user
								dialogBox
										.setText("Remote Procedure Call - Failure");
								serverResponseLabel
										.addStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(SERVER_ERROR);
								dialogBox.center();
								closeButton.setFocus(true);
							}

							public void onSuccess(String result) {
								dialogBox.setText("Remote Procedure Call");
								serverResponseLabel
										.removeStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(result);
								dialogBox.center();
								closeButton.setFocus(true);
							}
						});
			}
		}
		
		
		// Create a handler for the sendButton and nameField
		class AgentLoginHandler implements ClickHandler, KeyUpHandler {
			/**
			 * Fired when the user clicks on the sendButton.
			 */
			public void onClick(ClickEvent event) {
				login();
			}

			/**
			 * Fired when the user types in the nameField.
			 */
			public void onKeyUp(KeyUpEvent event) {
				if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
					login();
				}
			}

			/**
			 * login with as an Active Agent.
			 */
			private void login() {
				// First, we validate the input.
				errorLabel.setText("");
				final String textToServer = nameField.getText();
				String passToServer = pswrdtxtbxPassword.getText();
				if (!FieldVerifier.isValidUsername(textToServer)) {
					errorLabel.setText("Please enter at least four characters");
					return;
				}
				if (!FieldVerifier.isValidPassword(passToServer)) {
					errorLabel.setText("Please enter your password");
					return;
				}

				// Then, we send the input to the server.
				sendButton.setEnabled(false);
				nameField.setText(null);
				pswrdtxtbxPassword.setText(null);
				serverResponseLabel.setText("");
				sonetServlet.agentLogin(textToServer,passToServer,
						new AsyncCallback<Boolean>() {
							public void onFailure(Throwable caught) {
								_active=null;
								// Show the RPC error message to the user
								dialogBox.setText("Login Failure");
								serverResponseLabel.addStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(LOGIN_FAIL);
								dialogBox.center();
								closeButton.setFocus(true);
							}

							public void onSuccess(Boolean result) {
								_active = textToServer;
								dialogBox.setText("Successful Login");
								serverResponseLabel.removeStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(LOGIN_OK+textToServer);
								dialogBox.center();
								closeButton.setFocus(true);
							}
						});
			}
		}
		
		
		// Create a handler for the noteButton
		class AddNoteHandler implements ClickHandler, KeyUpHandler {
			/**
			 * Fired when the user clicks on the sendButton.
			 */
			public void onClick(ClickEvent event) {
				addNote();
			}

			/**
			 * Fired when the user types in the nameField.
			 */
			public void onKeyUp(KeyUpEvent event) {
				if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
					addNote();
				}
			}
			/**
			 * login with as an Active Agent.
			 */
			private void addNote() {
				// First, we validate the input.
				noteErrorLabel.setText("");
				String label = noteLabelTextbox.getText();
				String text = noteTextTextbox.getText();
				if (!FieldVerifier.isValidText(label)) {
					noteErrorLabel.setText("Note's label is a required field.");
					return;
				}
				if (!FieldVerifier.isValidText(text)) {
					noteErrorLabel.setText("Note's text is a required field.");
					return;
				}
				if (_active==null) {
					dialogBox.setText("Add Note Failure");
					serverResponseLabel.addStyleName("serverResponseLabelError");
					serverResponseLabel.setHTML("No user logged in. Please login first.");
					dialogBox.center();
					closeButton.setFocus(true);
					return;
				}

				// Then, we send the input to the server.
				noteLabelTextbox.setText(null);
				noteTextTextbox.setText(null);
				sonetServlet.addNote(_active, label, text,
						new AsyncCallback<Void>() {
							public void onFailure(Throwable caught) {
								// Show the the error to the user
								dialogBox.setText("Login Failure");
								serverResponseLabel.addStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(NOTE_ERROR);
								dialogBox.center();
								closeButton.setFocus(true);
							}

							public void onSuccess(Void v) {
								dialogBox.setText("A new Text Note was added!");
								serverResponseLabel.removeStyleName("serverResponseLabelError");
								serverResponseLabel.setHTML(NOTE_OK);
								dialogBox.center();
								closeButton.setFocus(true);
							}
						});
			}
		}

		// Add a handler to send the name to the server
		MyHandler handler = new MyHandler();
		sendButton.addClickHandler(handler);
		nameField.addKeyUpHandler(handler);

		//handler para listar a SoNet
		ListSonetHandler listHandler = new ListSonetHandler();
		listButton.addClickHandler(listHandler);

		//handler para listar a SoNet
		AgentLoginHandler loginHandler = new AgentLoginHandler();
		loginButton.addClickHandler(loginHandler);
		
		//handler para adicionar nota textual
		AddNoteHandler noteHandler = new AddNoteHandler();
		noteButton.addClickHandler(noteHandler);

	}
}
