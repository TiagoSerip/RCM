package pt.ist.sonet.presentation.server;

import java.util.ArrayList;

import pt.ist.fenixframework.Config;

import pt.ist.fenixframework.FenixFramework;
import pt.ist.pagamigo.InvalidTransferException;
import pt.ist.pagamigo.PagAmigoLocal;
import pt.ist.sonet.domain.SoNet;
import pt.ist.sonet.exception.AgentUsernameDoesNotExistsException;
import pt.ist.sonet.exception.AgentsCantVoteInTheirOwnPublicationsException;
import pt.ist.sonet.exception.AlreadyVotedException;
import pt.ist.sonet.exception.OnVoteLimitException;
import pt.ist.sonet.exception.PagAmigoTransferException;
import pt.ist.sonet.exception.PublicationIdDoesNotExistsException;
import pt.ist.sonet.exception.YouArentAFriendException;
import pt.ist.sonet.presentation.client.SoNetServlet;
import pt.ist.sonet.presentation.shared.FieldVerifier;
import pt.ist.sonet.service.AddNoteService;
import pt.ist.sonet.service.AgentLoginService;
import pt.ist.sonet.service.AllAgentsService;
import pt.ist.sonet.service.FriendsOfAgentService;
import pt.ist.sonet.service.GetAgentPublicationsService;
import pt.ist.sonet.service.GetAllOrganizationalAgentsService;
import pt.ist.sonet.service.GetPublicationCommentsService;
import pt.ist.sonet.service.ListAllService;
import pt.ist.sonet.service.NegativeVoteService;
import pt.ist.sonet.service.PositiveVoteService;
import pt.ist.sonet.service.dto.ListingDto;
import pt.ist.sonet.service.dto.PublicationViewDto;
import pt.ist.sonet.service.dto.PublicationListDto;
import pt.ist.sonet.service.dto.StringListDto;
import pt.ist.sonet.service.dto.BooleanDto;

import com.google.gwt.user.server.rpc.RemoteServiceServlet;

/**
 * The server side implementation of the RPC service.
 */
@SuppressWarnings("serial")
public class SoNetServletImpl extends RemoteServiceServlet implements SoNetServlet {
	static {
		if(FenixFramework.getConfig()==null) {
			FenixFramework.initialize(new Config() {{
				domainModelPath="src/main/dml/sonet.dml";
				dbAlias = "//localhost:3306/sonetdb"; 
				dbUsername = "sonet";
				dbPassword = "s0n3t";
				domainModelPath="dml/sonet.dml";
				rootClass=SoNet.class;
			}});
		}
	}
	
	/**
	 * Escape an html string. Escaping data received from the client helps to
	 * prevent cross-site script vulnerabilities.
	 * 
	 * @param html the html string to escape
	 * @return the escaped string
	 */
	private String escapeHtml(String html) {
		if (html == null) {
			return null;
		}
		return html.replaceAll("&", "&amp;").replaceAll("<", "&lt;")
				.replaceAll(">", "&gt;");
	}
	
	public ListingDto displaySonet() {
		
		ListingDto list = new ListingDto();
		ListAllService service = new ListAllService(list);
		
		service.execute();
		
		return list;
		
	}
	
	public Boolean agentLogin(String username, String password) throws AgentUsernameDoesNotExistsException{
		BooleanDto dto = new BooleanDto();
		AgentLoginService service = new AgentLoginService(username, password, dto);

		service.execute();

		return dto.getValue();
	}
	
	public void addNote(String username, String label, String text){
		AddNoteService service = new AddNoteService(username, label, text);
		service.execute();
	}
	
	public StringListDto getFriends(String username){
		StringListDto dto = new StringListDto();
		FriendsOfAgentService service = new FriendsOfAgentService(username, dto);
		service.execute();
		return dto;
	}
	
	public void makeDonation(String from, String to, int amount, String description) throws PagAmigoTransferException{
		PagAmigoLocal payment = new PagAmigoLocal();
		try {
			payment.transfer(from, to, amount, description);
		} catch (InvalidTransferException e) {
			throw new PagAmigoTransferException(from, to, amount, description);
		}
		
	}

	@Override
	public StringListDto getAgents() {
		StringListDto dto = new StringListDto();
		AllAgentsService service = new AllAgentsService(dto);
		service.execute();
		return dto;
	}

	@Override
	public ArrayList<PublicationViewDto> getPublicationList(String from, String asking) throws YouArentAFriendException{
		PublicationListDto pubdto = new PublicationListDto();
		GetAgentPublicationsService service = new GetAgentPublicationsService(from, asking, pubdto);
		service.execute();
		return pubdto.getlisting();
	}
	
	public StringListDto getOrganizationalAgents() {
		StringListDto dto = new StringListDto();
		GetAllOrganizationalAgentsService service = new GetAllOrganizationalAgentsService(dto);
		service.execute();
		return dto;
	}
	
	public StringListDto getPublicationComments(int pubId) throws PublicationIdDoesNotExistsException{
		StringListDto dto = new StringListDto();
		GetPublicationCommentsService service = new GetPublicationCommentsService(pubId, dto);
		service.execute();
		return dto;
	}
	
	public void positiveVote(String user, int pubId) throws AlreadyVotedException, OnVoteLimitException, AgentsCantVoteInTheirOwnPublicationsException{
		PositiveVoteService service = new PositiveVoteService(user, pubId);
		service.execute();
	}
	
	public void negativeVote(String user, int pubId) throws AlreadyVotedException, OnVoteLimitException, AgentsCantVoteInTheirOwnPublicationsException{
		NegativeVoteService service = new NegativeVoteService(user, pubId);
		service.execute();
	}

	public PublicationViewDto viewPublication(String asking, int pubId)
			throws YouArentAFriendException,
			PublicationIdDoesNotExistsException {
		// TODO Auto-generated method stub
		return null;
	}
	
}
