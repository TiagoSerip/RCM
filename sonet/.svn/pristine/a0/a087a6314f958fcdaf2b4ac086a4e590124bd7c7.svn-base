package pt.ist.sonet.service;

import pt.ist.fenixframework.FenixFramework;
import pt.ist.largacaixa.InvalidURLException;
import pt.ist.largacaixa.LargaCaixaLocal;
import pt.ist.pagamigo.*;
import pt.ist.sonet.domain.Content;
import pt.ist.sonet.domain.Publication;
import pt.ist.sonet.domain.SoNet;
import pt.ist.sonet.exception.AgentUsernameDoesNotExistsException;
import pt.ist.sonet.exception.PagAmigoTransferException;
import pt.ist.sonet.exception.PublicationIdDoesNotExistsException;
import pt.ist.sonet.exception.SoNetException;

/**
 * Implementa o servico de ver/comprar conteudos da SoNet.
 * 
 * @author ES Grupo 8
 * 
 */
public class SeeBuyContentService extends SonetService {

	private String fromUser;
	private String toUser;
	private int pubId;
	private int price;
	private String paymentDesc;

	/**
	 * Construtor
	 * 
	 * @param String
	 *            from
	 * @param String
	 *            to
	 * @param Integer
	 *            amount
	 * @param String
	 *            description
	 */
	public SeeBuyContentService(String from, int pubId) {
		fromUser = from;
		pubId = pubId;
	}

	/**
	 * Faz o dispatch do servico
	 * 
	 * @throws SoNetException
	 * @throws AgentUsernameDoesNotExistsException
	 * @throws PagAmigoTransferException
	 */
	@Override
	public void dispatch() throws SoNetException,
			AgentUsernameDoesNotExistsException, PagAmigoTransferException {

		SoNet network = FenixFramework.getRoot();
		Content pub = (Content) network.getPublicationById(pubId);
		this.price = pub.getPrice();
		this.toUser = pub.getAgent().getName();

		if (pub == null)
			throw new PublicationIdDoesNotExistsException(pubId);
		if (!network.hasAgentByUsername(fromUser))
			throw new AgentUsernameDoesNotExistsException(fromUser);

		LargaCaixaLocal larga = new LargaCaixaLocal();
		PagAmigoLocal paga = new PagAmigoLocal();
		if (price > paga.getBalance(fromUser)) {
			// throw new InsuficientFundsException();
		}

		try {
			if (!(price == 0)) {
				paga.transfer(fromUser, toUser, price, paymentDesc);
			}
		} catch (InvalidTransferException e) {
			throw new PagAmigoTransferException(fromUser, toUser, price,
					paymentDesc);
		}

		try {
			larga.access(fromUser, pub.getURL());
		} catch (InvalidURLException e) {

		}

	}
}