package pt.ist.sonet.service;

import pt.ist.fenixframework.FenixFramework;
import pt.ist.sonet.domain.Agent;
import pt.ist.sonet.domain.Publication;
import pt.ist.sonet.domain.SoNet;
import pt.ist.sonet.exception.AgentUsernameDoesNotExistsException;
import pt.ist.sonet.exception.CanNotCommentException;
import pt.ist.sonet.exception.PublicationIdDoesNotExistsException;
import pt.ist.sonet.exception.SoNetException;
import pt.ist.sonet.exception.YouArentAFriendException;

/**
 * @author ES Grupo 8
 */
public class AddCommentService extends SonetService {
	
	private String agentUser;
	private int pubID;
	private String commentText;
	
	/**
	 * Construtor
	 * 
	 * @param String user - username do agente individual que quer comentar
	 * @param String text - texto do comentario
	 * @param int pubId - identificador da publicacao que se quer comentar
	 */
	public AddCommentService(String user, int pubId, String text) {
		agentUser = user;
		pubID = pubId;
		commentText = text;
	}
	
	/**
	 * 
	 * Faz o envio (dispatch) do servico 
	 * 
	 * @throws SoNetException
	 * @throws AgentUsernameDoesNotExistsException
	 * @throws CanNotCommentException
	 */
	@Override
	protected void dispatch() throws SoNetException, AgentUsernameDoesNotExistsException, CanNotCommentException {
		SoNet network = FenixFramework.getRoot();
		Agent commentator = network.getAgentByUsername(agentUser);
		if(commentator == null)
			throw new AgentUsernameDoesNotExistsException(agentUser);
		Publication pub = network.getPublicationById(pubID);
		if(pub == null)
			throw new PublicationIdDoesNotExistsException(pubID);
		try {
			network.commentPublication(commentator,pub, commentText);
		} catch (YouArentAFriendException e) {
			throw new CanNotCommentException(commentator.getUsername(), pubID, pub.getAgent().getName());
		}
	}
	
}
